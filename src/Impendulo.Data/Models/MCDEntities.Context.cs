//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Impendulo.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MCDEntities : DbContext
    {
        public MCDEntities()
            : base("name=MCDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assessor> Assessors { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<CostingModel> CostingModels { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CurricullumCourseCode> CurricullumCourseCodes { get; set; }
        public virtual DbSet<CurriculumCourseEnrollment> CurriculumCourseEnrollments { get; set; }
        public virtual DbSet<CurriculumCourseMinimumMaximum> CurriculumCourseMinimumMaximums { get; set; }
        public virtual DbSet<CurriculumCoursePredecessor> CurriculumCoursePredecessors { get; set; }
        public virtual DbSet<CurriculumCourse> CurriculumCourses { get; set; }
        public virtual DbSet<CurriculumEquirySelectedCourse> CurriculumEquirySelectedCourses { get; set; }
        public virtual DbSet<CurriculumPrequisiteCourse> CurriculumPrequisiteCourses { get; set; }
        public virtual DbSet<Curriculum> Curriculums { get; set; }
        public virtual DbSet<EmailMessageRepository> EmailMessageRepositories { get; set; }
        public virtual DbSet<EmailMessageRepositoryHistory> EmailMessageRepositoryHistories { get; set; }
        public virtual DbSet<EmailSystemOutGoingMessage> EmailSystemOutGoingMessages { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<EnrollmentDocument> EnrollmentDocuments { get; set; }
        public virtual DbSet<EquiryHistory> EquiryHistories { get; set; }
        public virtual DbSet<FacilitatorAssociatedCourse> FacilitatorAssociatedCourses { get; set; }
        public virtual DbSet<FacilitatorQualification> FacilitatorQualifications { get; set; }
        public virtual DbSet<Facilitator> Facilitators { get; set; }
        public virtual DbSet<FacilitatorSetaAccreditation> FacilitatorSetaAccreditations { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<LookupAddressType> LookupAddressTypes { get; set; }
        public virtual DbSet<LookupContactType> LookupContactTypes { get; set; }
        public virtual DbSet<LookupCountry> LookupCountries { get; set; }
        public virtual DbSet<LookupDepartment> LookupDepartments { get; set; }
        public virtual DbSet<LookupDisability> LookupDisabilities { get; set; }
        public virtual DbSet<LookupEmailMessageRepositoryHistoryTrancationType> LookupEmailMessageRepositoryHistoryTrancationTypes { get; set; }
        public virtual DbSet<LookupEnquiryStatus> LookupEnquiryStatuses { get; set; }
        public virtual DbSet<LookupEnrollentDocumentType> LookupEnrollentDocumentTypes { get; set; }
        public virtual DbSet<LookupEnrollmentProgressState> LookupEnrollmentProgressStates { get; set; }
        public virtual DbSet<LookupEnrollmentType> LookupEnrollmentTypes { get; set; }
        public virtual DbSet<LookupEquiryHistoryType> LookupEquiryHistoryTypes { get; set; }
        public virtual DbSet<LookupEquiryOrigion> LookupEquiryOrigions { get; set; }
        public virtual DbSet<LookupEthnicity> LookupEthnicities { get; set; }
        public virtual DbSet<LookupGender> LookupGenders { get; set; }
        public virtual DbSet<LookupMartialStatus> LookupMartialStatuses { get; set; }
        public virtual DbSet<LookupProcess> LookupProcesses { get; set; }
        public virtual DbSet<LookupProcessStep> LookupProcessSteps { get; set; }
        public virtual DbSet<LookupProvince> LookupProvinces { get; set; }
        public virtual DbSet<LookupQualificationLevel> LookupQualificationLevels { get; set; }
        public virtual DbSet<LookupSectionalEnrollmentType> LookupSectionalEnrollmentTypes { get; set; }
        public virtual DbSet<LookupSeta> LookupSetas { get; set; }
        public virtual DbSet<LookupTitle> LookupTitles { get; set; }
        public virtual DbSet<LookupTypeOfRelation> LookupTypeOfRelations { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<NextOfKin> NextOfKins { get; set; }
        public virtual DbSet<Qualification> Qualifications { get; set; }
        public virtual DbSet<SMTPSetting> SMTPSettings { get; set; }
        public virtual DbSet<StudentAssociatedCompany> StudentAssociatedCompanies { get; set; }
        public virtual DbSet<StudentDisability> StudentDisabilities { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SystemAdministrator> SystemAdministrators { get; set; }
        public virtual DbSet<StudentIDDocument> StudentIDDocuments { get; set; }
        public virtual DbSet<StudentPhoto> StudentPhotos { get; set; }
        public virtual DbSet<CurriculumCourseDayCanBeScheduled> CurriculumCourseDayCanBeScheduleds { get; set; }
        public virtual DbSet<LookupDayOfWeek> LookupDayOfWeeks { get; set; }
        public virtual DbSet<PublicHoliday> PublicHolidays { get; set; }
        public virtual DbSet<LookupScheduleLocation> LookupScheduleLocations { get; set; }
        public virtual DbSet<LookupScheduleStatus> LookupScheduleStatuses { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<StudentEnrollment> StudentEnrollments { get; set; }
        public virtual DbSet<ApprienticeshipEnrollment> ApprienticeshipEnrollments { get; set; }
        public virtual DbSet<Enrollment> Enrollments { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<LookupActivityCategory> LookupActivityCategories { get; set; }
        public virtual DbSet<AssessmentFeedBackForm> AssessmentFeedBackForms { get; set; }
        public virtual DbSet<AssessmentModuleActivity> AssessmentModuleActivities { get; set; }
        public virtual DbSet<Assessment> Assessments { get; set; }
        public virtual DbSet<LookupPracticalAssessmentStatus> LookupPracticalAssessmentStatuses { get; set; }
        public virtual DbSet<AssessmentModule> AssessmentModules { get; set; }
        public virtual DbSet<CurriculumCourseModule> CurriculumCourseModules { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<LookupTheoriticalAssesmentStatus> LookupTheoriticalAssesmentStatuses { get; set; }
        public virtual DbSet<AssessmentReport> AssessmentReports { get; set; }
        public virtual DbSet<LookupAssessmentRecommendation> LookupAssessmentRecommendations { get; set; }
        public virtual DbSet<LookupEnquiryType> LookupEnquiryTypes { get; set; }
        public virtual DbSet<LookupProgessFileType> LookupProgessFileTypes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<CompanyProgressFile> CompanyProgressFiles { get; set; }
        public virtual DbSet<CompanyStudentProgressFile> CompanyStudentProgressFiles { get; set; }
        public virtual DbSet<CourseSchedule> CourseSchedules { get; set; }
        public virtual DbSet<EmailSystemOutGoingMessageAttachment> EmailSystemOutGoingMessageAttachments { get; set; }
        public virtual DbSet<Individual> Individuals { get; set; }
        public virtual DbSet<ProgressFile> ProgressFiles { get; set; }
        public virtual DbSet<StudentProgressFile> StudentProgressFiles { get; set; }
        public virtual DbSet<EnquiryForCoursesNotRunByMCD> EnquiryForCoursesNotRunByMCDs { get; set; }
        public virtual DbSet<EnrollmentPaymentHistory> EnrollmentPaymentHistories { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<OffSiteSchedule> OffSiteSchedules { get; set; }
        public virtual DbSet<OnSiteSchedule> OnSiteSchedules { get; set; }
        public virtual DbSet<VenueAssociatedCourse> VenueAssociatedCourses { get; set; }
        public virtual DbSet<VenueAssociatedCurriculumCourse> VenueAssociatedCurriculumCourses { get; set; }
        public virtual DbSet<Venue> Venues { get; set; }
        public virtual DbSet<ScheduleConfirmationDocumentation> ScheduleConfirmationDocumentations { get; set; }
        public virtual DbSet<LookupScheduleConfirmationDocumentationType> LookupScheduleConfirmationDocumentationTypes { get; set; }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCourseInOrder(Nullable<int> curriculumID)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCourseInOrder", curriculumIDParameter);
        }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCourseInOrder(Nullable<int> curriculumID, MergeOption mergeOption)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCourseInOrder", mergeOption, curriculumIDParameter);
        }
    
        public virtual ObjectResult<string> GetLookupTablesForEnumAutoGenteration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLookupTablesForEnumAutoGenteration");
        }
    
        public virtual ObjectResult<Report_StudentInfo_Result> Report_StudentInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_StudentInfo_Result>("Report_StudentInfo");
        }
    
        public virtual ObjectResult<Reports_StudentReports_Result> Reports_StudentReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Reports_StudentReports_Result>("Reports_StudentReports");
        }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCoursePreRequisiteCourseNotYetScheduled(Nullable<int> curriculumCourseID, Nullable<int> enrollmentID)
        {
            var curriculumCourseIDParameter = curriculumCourseID.HasValue ?
                new ObjectParameter("CurriculumCourseID", curriculumCourseID) :
                new ObjectParameter("CurriculumCourseID", typeof(int));
    
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCoursePreRequisiteCourseNotYetScheduled", curriculumCourseIDParameter, enrollmentIDParameter);
        }
    
        public virtual ObjectResult<CurriculumCourse> GetCurriculumCoursePreRequisiteCourseNotYetScheduled(Nullable<int> curriculumCourseID, Nullable<int> enrollmentID, MergeOption mergeOption)
        {
            var curriculumCourseIDParameter = curriculumCourseID.HasValue ?
                new ObjectParameter("CurriculumCourseID", curriculumCourseID) :
                new ObjectParameter("CurriculumCourseID", typeof(int));
    
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurriculumCourse>("GetCurriculumCoursePreRequisiteCourseNotYetScheduled", mergeOption, curriculumCourseIDParameter, enrollmentIDParameter);
        }
    
        public virtual ObjectResult<GetAllOffSiteScheduledCourses_Result> GetAllOffSiteScheduledCourses(Nullable<int> scheduleLocationID, Nullable<int> curriculumCourseID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var scheduleLocationIDParameter = scheduleLocationID.HasValue ?
                new ObjectParameter("ScheduleLocationID", scheduleLocationID) :
                new ObjectParameter("ScheduleLocationID", typeof(int));
    
            var curriculumCourseIDParameter = curriculumCourseID.HasValue ?
                new ObjectParameter("CurriculumCourseID", curriculumCourseID) :
                new ObjectParameter("CurriculumCourseID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOffSiteScheduledCourses_Result>("GetAllOffSiteScheduledCourses", scheduleLocationIDParameter, curriculumCourseIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllOnSiteScheduledCourses_Result> GetAllOnSiteScheduledCourses(Nullable<int> scheduleLocationID, Nullable<int> curriculumCourseID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var scheduleLocationIDParameter = scheduleLocationID.HasValue ?
                new ObjectParameter("ScheduleLocationID", scheduleLocationID) :
                new ObjectParameter("ScheduleLocationID", typeof(int));
    
            var curriculumCourseIDParameter = curriculumCourseID.HasValue ?
                new ObjectParameter("CurriculumCourseID", curriculumCourseID) :
                new ObjectParameter("CurriculumCourseID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOnSiteScheduledCourses_Result>("GetAllOnSiteScheduledCourses", scheduleLocationIDParameter, curriculumCourseIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetCurriculumCoursePreRequisiteCourse_Result> GetCurriculumCoursePreRequisiteCourse(Nullable<int> curriculumID, Nullable<int> enrollmentID)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurriculumCoursePreRequisiteCourse_Result>("GetCurriculumCoursePreRequisiteCourse", curriculumIDParameter, enrollmentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetCurriculumCourseEnrollmentPreRequisiteEndDate(Nullable<int> curriculumCourseID, Nullable<int> enrollmentID)
        {
            var curriculumCourseIDParameter = curriculumCourseID.HasValue ?
                new ObjectParameter("CurriculumCourseID", curriculumCourseID) :
                new ObjectParameter("CurriculumCourseID", typeof(int));
    
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetCurriculumCourseEnrollmentPreRequisiteEndDate", curriculumCourseIDParameter, enrollmentIDParameter);
        }
    
        public virtual ObjectResult<GetAllCourseSchedulesWhichCurrentlyInProgress_Result> GetAllCourseSchedulesWhichCurrentlyInProgress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCourseSchedulesWhichCurrentlyInProgress_Result>("GetAllCourseSchedulesWhichCurrentlyInProgress");
        }
    
        public virtual ObjectResult<GetAllCourseSchedulesWhichHaveNotStartedYet_Result> GetAllCourseSchedulesWhichHaveNotStartedYet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCourseSchedulesWhichHaveNotStartedYet_Result>("GetAllCourseSchedulesWhichHaveNotStartedYet");
        }
    
        public virtual ObjectResult<GetAllCourseSchedulesWhichHavePassedCompletionDate_Result> GetAllCourseSchedulesWhichHavePassedCompletionDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCourseSchedulesWhichHavePassedCompletionDate_Result>("GetAllCourseSchedulesWhichHavePassedCompletionDate");
        }
    
        public virtual ObjectResult<GETAllCourseEnrollmentHistoryByEnrollmentID_Result> GETAllCourseEnrollmentHistoryByEnrollmentID(Nullable<int> enrollmentID)
        {
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETAllCourseEnrollmentHistoryByEnrollmentID_Result>("GETAllCourseEnrollmentHistoryByEnrollmentID", enrollmentIDParameter);
        }
    
        public virtual ObjectResult<GETAllCourseEnrollmentHistoryByStudentID_Result> GETAllCourseEnrollmentHistoryByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETAllCourseEnrollmentHistoryByStudentID_Result>("GETAllCourseEnrollmentHistoryByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<GetAllEnrollmentsCompanyAndStudent_Result> GetAllEnrollmentsCompanyAndStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEnrollmentsCompanyAndStudent_Result>("GetAllEnrollmentsCompanyAndStudent");
        }
    
        public virtual ObjectResult<GetAllEnrollmentsPerCompany_Result> GetAllEnrollmentsPerCompany(Nullable<int> companyProgressFileID)
        {
            var companyProgressFileIDParameter = companyProgressFileID.HasValue ?
                new ObjectParameter("CompanyProgressFileID", companyProgressFileID) :
                new ObjectParameter("CompanyProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEnrollmentsPerCompany_Result>("GetAllEnrollmentsPerCompany", companyProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllEnrollmentsPerStudent_Result> GetAllEnrollmentsPerStudent(Nullable<int> studentProgressFileID)
        {
            var studentProgressFileIDParameter = studentProgressFileID.HasValue ?
                new ObjectParameter("StudentProgressFileID", studentProgressFileID) :
                new ObjectParameter("StudentProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEnrollmentsPerStudent_Result>("GetAllEnrollmentsPerStudent", studentProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesForSelectedCompany_Result> GetAllScheduledCoursesForSelectedCompany(Nullable<int> companyProgressFileID)
        {
            var companyProgressFileIDParameter = companyProgressFileID.HasValue ?
                new ObjectParameter("CompanyProgressFileID", companyProgressFileID) :
                new ObjectParameter("CompanyProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesForSelectedCompany_Result>("GetAllScheduledCoursesForSelectedCompany", companyProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreCompletedForSelectedCompany_Result> GetAllScheduledCoursesWhichAreCompletedForSelectedCompany(Nullable<int> companyProgressFileID)
        {
            var companyProgressFileIDParameter = companyProgressFileID.HasValue ?
                new ObjectParameter("CompanyProgressFileID", companyProgressFileID) :
                new ObjectParameter("CompanyProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreCompletedForSelectedCompany_Result>("GetAllScheduledCoursesWhichAreCompletedForSelectedCompany", companyProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreCompletedForSelectedStudent_Result> GetAllScheduledCoursesWhichAreCompletedForSelectedStudent(Nullable<int> studentProgressFileID)
        {
            var studentProgressFileIDParameter = studentProgressFileID.HasValue ?
                new ObjectParameter("StudentProgressFileID", studentProgressFileID) :
                new ObjectParameter("StudentProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreCompletedForSelectedStudent_Result>("GetAllScheduledCoursesWhichAreCompletedForSelectedStudent", studentProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedCompany_Result> GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedCompany(Nullable<int> companyProgressFileID)
        {
            var companyProgressFileIDParameter = companyProgressFileID.HasValue ?
                new ObjectParameter("CompanyProgressFileID", companyProgressFileID) :
                new ObjectParameter("CompanyProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedCompany_Result>("GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedCompany", companyProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedStudent_Result> GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedStudent(Nullable<int> studentProgressFileID)
        {
            var studentProgressFileIDParameter = studentProgressFileID.HasValue ?
                new ObjectParameter("StudentProgressFileID", studentProgressFileID) :
                new ObjectParameter("StudentProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedStudent_Result>("GetAllScheduledCoursesWhichAreCurrentlyInProgressForSelectedStudent", studentProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreNotYetStartedForSelectedCompany_Result> GetAllScheduledCoursesWhichAreNotYetStartedForSelectedCompany(Nullable<int> companyProgressFileID)
        {
            var companyProgressFileIDParameter = companyProgressFileID.HasValue ?
                new ObjectParameter("CompanyProgressFileID", companyProgressFileID) :
                new ObjectParameter("CompanyProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreNotYetStartedForSelectedCompany_Result>("GetAllScheduledCoursesWhichAreNotYetStartedForSelectedCompany", companyProgressFileIDParameter);
        }
    
        public virtual ObjectResult<GetAllScheduledCoursesWhichAreNotYetStartedForSelectedStudent_Result> GetAllScheduledCoursesWhichAreNotYetStartedForSelectedStudent(Nullable<int> studentProgressFileID)
        {
            var studentProgressFileIDParameter = studentProgressFileID.HasValue ?
                new ObjectParameter("StudentProgressFileID", studentProgressFileID) :
                new ObjectParameter("StudentProgressFileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduledCoursesWhichAreNotYetStartedForSelectedStudent_Result>("GetAllScheduledCoursesWhichAreNotYetStartedForSelectedStudent", studentProgressFileIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> DetermineIfTheFirstCousrseToBeScheduled(Nullable<int> curriculumID, Nullable<int> enrollmentID, Nullable<int> curriculumCourseID_ToCheck)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            var curriculumCourseID_ToCheckParameter = curriculumCourseID_ToCheck.HasValue ?
                new ObjectParameter("CurriculumCourseID_ToCheck", curriculumCourseID_ToCheck) :
                new ObjectParameter("CurriculumCourseID_ToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("DetermineIfTheFirstCousrseToBeScheduled", curriculumIDParameter, enrollmentIDParameter, curriculumCourseID_ToCheckParameter);
        }
    
        public virtual ObjectResult<GetStudentRegister_Result> GetStudentRegister(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentRegister_Result>("GetStudentRegister", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<REPORTS_GetAll_CONFIRMED_AND_NOT_YET_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate_Result> REPORTS_GetAll_CONFIRMED_AND_NOT_YET_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_CONFIRMED_AND_NOT_YET_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate_Result>("REPORTS_GetAll_CONFIRMED_AND_NOT_YET_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate");
        }
    
        public virtual ObjectResult<REPORTS_GetAll_CONFIRMED_AND_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate_Result> REPORTS_GetAll_CONFIRMED_AND_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_CONFIRMED_AND_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate_Result>("REPORTS_GetAll_CONFIRMED_AND_COMPLETED_CourseSchedulesWhichHavePassedCompletionDate");
        }
    
        public virtual ObjectResult<REPORTS_GetAll_CONFIRMED_CourseSchedules_Result> REPORTS_GetAll_CONFIRMED_CourseSchedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_CONFIRMED_CourseSchedules_Result>("REPORTS_GetAll_CONFIRMED_CourseSchedules");
        }
    
        public virtual ObjectResult<REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichCurrentlyInProgress_Result> REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichCurrentlyInProgress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichCurrentlyInProgress_Result>("REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichCurrentlyInProgress");
        }
    
        public virtual ObjectResult<REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichHaveNotStartedYet_Result> REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichHaveNotStartedYet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichHaveNotStartedYet_Result>("REPORTS_GetAll_CONFIRMED_CourseSchedulesWhichHaveNotStartedYet");
        }
    
        public virtual ObjectResult<REPORTS_GetAll_NOT_YET_CONFIRMED_CourseSchedules_Result> REPORTS_GetAll_NOT_YET_CONFIRMED_CourseSchedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REPORTS_GetAll_NOT_YET_CONFIRMED_CourseSchedules_Result>("REPORTS_GetAll_NOT_YET_CONFIRMED_CourseSchedules");
        }
    
        public virtual ObjectResult<GetAllStudentsRelatedToScheduledCourse_Result> GetAllStudentsRelatedToScheduledCourse(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> faciltatorID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var faciltatorIDParameter = faciltatorID.HasValue ?
                new ObjectParameter("FaciltatorID", faciltatorID) :
                new ObjectParameter("FaciltatorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStudentsRelatedToScheduledCourse_Result>("GetAllStudentsRelatedToScheduledCourse", startDateParameter, endDateParameter, faciltatorIDParameter);
        }
    }
}
